1.Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
class Solution {
    public static void rotateArray(int[] nums,int k,int n){
        if(n==0){
            return;
        }
        k=k%n;
        int temp []=new int[k];
        for(int i=0;i<k;i++){
            temp[i]=nums[n-k+i];
        } 

        for(int i=n-k-1;i>=0;i--){
            nums[i+k]=nums[i];
        }

           for (int i = 0; i < k; i++) {
            nums[i] = temp[i];
        }
    }
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        rotateArray(nums,k,n);
    }
}
Time complexity:O(N) Space complexity:O(K)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Removing Minimum and Maximum From Array
Input: nums = [2,10,7,5,4,1,8,6]
Output: 5
Explanation: 
The minimum element in the array is nums[5], which is 1.
The maximum element in the array is nums[1], which is 10.
We can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.
This results in 2 + 3 = 5 deletions, which is the minimum number possible.

class Solution {
    public int minimumDeletions(int[] nums) {
        int minIdx = -1;
        int maxIdx = -1;
        
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        
        for (int i = 0; i < nums.length; i++){
            if (min > nums[i]){
                min = nums[i];
                minIdx = i;
            }
            
            if (max < nums[i]){
                max = nums[i];
                maxIdx = i;
            }
        }
        
        
        int n = nums.length;
        
        int firstDiff = Math.max(maxIdx, minIdx) + 1;
        int lastDiff =n - Math.min(maxIdx, minIdx);
        int midDiff = n - Math.max(maxIdx, minIdx) + Math.min(maxIdx, minIdx) + 1;
        
        return Math.min(Math.min(firstDiff, lastDiff), midDiff);
        
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Reverse String
Write a function that reverses a string. The input string is given as an array of characters s.
You must do this by modifying the input array in-place with O(1) extra memory.

class Solution {
    public void reverseString(char[] s) {
        int i=0;
        int j=s.length-1;

        while(i<j){
            char temp=s[i];
            s[i]=s[j];
            s[j]=temp;
            i++;
            j--;
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.You are given an integer T (number of test cases). You are given array A and an integer B for each test case. You have to tell whether B is present in array A or not.Problem Constraints
input 1:
1
5
4 1 5 9 1
5

Output
1

import java.util.Scanner;

public class presenceOfElement {
public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
	int testCase=sc.nextInt();
	
	int length=sc.nextInt();
	int arr[] = new int[length];
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	
	int element = sc.nextInt();
	boolean res = false;
	for(int i=0;i<arr.length;i++) {
		if(arr[i]==element) {
		res=true;
		break;
		}
	}
	if(res) {
		System.out.println(1);
	}else {
		System.out.println(0);
	}
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.You are given an integer array A. You have to find the second largest element/value in the array or report that no such element exists.

import java.util.Scanner;

public class Secondmax {
public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
	int length=sc.nextInt();
	int arr[] = new int[length];
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	
	int largest=Integer.MIN_VALUE;
	int secondLargest=Integer.MIN_VALUE;
	if(length==1){
         System.out.println(-1);
          return;
        }
	for(int i=0;i<length;i++) {
		if(arr[i]>largest) {
			largest=arr[i];
			secondLargest=largest;
		}else if(arr[i]>secondLargest && arr[i]!=largest) {
			secondLargest=arr[i];
		}
	}
	System.out.println(secondLargest);
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.You are given an array of integers A of size N.Return the difference between the maximum among all even numbers of A and the minimum among all odd numbers in A.
A = [0, 2, 9]
Maximum of all even numbers = 2
Minimum of all odd numbers = 9
ans = 2 - 9 = -7
import java.util.Scanner;
public class EvenMaxOddMinDiff {
public static void main(String[] args) {

	Scanner sc = new Scanner(System.in);	
	int length=sc.nextInt();
	int arr[] = new int[length];
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	
	int maxEven=Integer.MIN_VALUE;
	int minOdd=Integer.MAX_VALUE;
	for(int i=0;i<arr.length;i++) {
		

        for (int num : arr) {
            if (num % 2 == 0 && num > maxEven) {
                maxEven = num;
            } else if (num % 2 != 0 && num < minOdd) {
                minOdd = num;
            }
        }

        if (maxEven == Integer.MIN_VALUE ) {
           maxEven=0;
        }
        if ( minOdd == Integer.MAX_VALUE) {
        	minOdd=0;
        }
       
	}
	 int diff= maxEven - minOdd;
		System.out.println(diff);
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.You are given an integer T denoting the number of test cases. For each test case, you are given an integer array A.

import java.util.Scanner;

public class EvenOdd {
public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
	int noOFTestCase=sc.nextInt();
	
	for(int i=0;i<noOFTestCase;i++) {
		genrateTestCase(sc);
	}
			
			
}

private static void genrateTestCase( Scanner sc) {

	int length = sc.nextInt();
	int arr[]=new int[length];
	
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	  for (int num : arr) {
          if (num % 2 == 0) {
        	  System.out.print(num+" ");
          }
      }
	  System.out.println();
	  for (int num : arr) {
          if (num % 2 != 0 ) {
             System.out.print(num+" ");
          }

      }
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.Multiple left rotations of the array
Input 1:
    A = [1, 2, 3, 4, 5]
    B = [2, 3]
Output 1:
 [ [3, 4, 5, 1, 2]
   [4, 5, 1, 2, 3] ]

public class Solution {
    
    public ArrayList<ArrayList<Integer>> solve(ArrayList<Integer> A, ArrayList<Integer> B) {
        
        ArrayList<ArrayList<Integer>> rotatedListMatrix = new ArrayList<>();
         int n=A.size();
         for(int i : B){
             int rotation = (n - (i % n));
             rotatedListMatrix.add(leftRotate(A,rotation));
         }
      return rotatedListMatrix;
    }
    private ArrayList<Integer> leftRotate(ArrayList<Integer> list, int d){
        ArrayList<Integer> rotatedList = new ArrayList<>();
        int n = list.size();
        for(int i=0;i<d;i++){
          rotatedList.add(list.get(n-d+i));  
        }
        for (int i = 0 ; i < n - d; i++) {
            rotatedList.add(list.get(i));
        }
        return rotatedList;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.Given an integer array A of size N and an integer B, you have to print the same array after rotating it B times towards the right.

class Solution {
    public static void rotateArray(int[] nums,int k,int n){
        if(n==0){
            return;
        }
        k=k%n;
        int temp []=new int[k];
        for(int i=0;i<k;i++){
            temp[i]=nums[n-k+i];
        } 

        for(int i=n-k-1;i>=0;i--){
            nums[i+k]=nums[i];
        }

           for (int i = 0; i < k; i++) {
            nums[i] = temp[i];
        }
    }
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        rotateArray(nums,k,n);
    }
}
Time complexity:O(N) Space complexity:O(K)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.Given an array of integers nums, return the number of good pairs.

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==nums[j] && i<j){
                    count++;
                }
            }
        }
        return count;
    }
}
