1.Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
class Solution {
    public static void rotateArray(int[] nums,int k,int n){
        if(n==0){
            return;
        }
        k=k%n;
        int temp []=new int[k];
        for(int i=0;i<k;i++){
            temp[i]=nums[n-k+i];
        } 

        for(int i=n-k-1;i>=0;i--){
            nums[i+k]=nums[i];
        }

           for (int i = 0; i < k; i++) {
            nums[i] = temp[i];
        }
    }
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        rotateArray(nums,k,n);
    }
}
Time complexity:O(N) Space complexity:O(K)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Reverse String
Write a function that reverses a string. The input string is given as an array of characters s.
You must do this by modifying the input array in-place with O(1) extra memory.

class Solution {
    public void reverseString(char[] s) {
        int i=0;
        int j=s.length-1;

        while(i<j){
            char temp=s[i];
            s[i]=s[j];
            s[j]=temp;
            i++;
            j--;
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.You are given an integer T (number of test cases). You are given array A and an integer B for each test case. You have to tell whether B is present in array A or not.Problem Constraints
input 1:
1
5
4 1 5 9 1
5

Output
1

import java.util.Scanner;

public class presenceOfElement {
public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
	int testCase=sc.nextInt();
	
	int length=sc.nextInt();
	int arr[] = new int[length];
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	
	int element = sc.nextInt();
	boolean res = false;
	for(int i=0;i<arr.length;i++) {
		if(arr[i]==element) {
		res=true;
		break;
		}
	}
	if(res) {
		System.out.println(1);
	}else {
		System.out.println(0);
	}
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.You are given an integer array A. You have to find the second largest element/value in the array or report that no such element exists.

import java.util.Scanner;

public class Secondmax {
public static void main(String[] args) {
	Scanner sc = new Scanner(System.in);
	
	int length=sc.nextInt();
	int arr[] = new int[length];
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	
	int largest=Integer.MIN_VALUE;
	int secondLargest=Integer.MIN_VALUE;
	if(length==1){
         System.out.println(-1);
          return;
        }
	for(int i=0;i<length;i++) {
		if(arr[i]>largest) {
			largest=arr[i];
			secondLargest=largest;
		}else if(arr[i]>secondLargest && arr[i]!=largest) {
			secondLargest=arr[i];
		}
	}
	System.out.println(secondLargest);
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.You are given an array of integers A of size N.Return the difference between the maximum among all even numbers of A and the minimum among all odd numbers in A.
A = [0, 2, 9]
Maximum of all even numbers = 2
Minimum of all odd numbers = 9
ans = 2 - 9 = -7
import java.util.Scanner;
public class EvenMaxOddMinDiff {
public static void main(String[] args) {

	Scanner sc = new Scanner(System.in);
	
	int length=sc.nextInt();
	int arr[] = new int[length];
	for(int i=0;i<length;i++) {
		arr[i]=sc.nextInt();
	}
	
	int max=Integer.MIN_VALUE;
	int min=Integer.MAX_VALUE;
	for(int i=0;i<length;i++) {
		if(arr[i]%2!=0) {
			if(arr[i]<min) {
				min=arr[i];
		}
		}else{
			if(arr[i]>max) {
				max=arr[i];
			}
		}
	}
	int diff = max-min;
	System.out.println(diff);
}
}
